[0.000000] (-) TimerEvent: {}
[0.000608] (-) JobUnselected: {'identifier': 'franka_bringup'}
[0.000641] (-) JobUnselected: {'identifier': 'franka_description'}
[0.000660] (-) JobUnselected: {'identifier': 'franka_example_controllers'}
[0.000983] (-) JobUnselected: {'identifier': 'franka_gripper'}
[0.001024] (-) JobUnselected: {'identifier': 'franka_hardware'}
[0.001057] (-) JobUnselected: {'identifier': 'franka_moveit_config'}
[0.001089] (-) JobUnselected: {'identifier': 'franka_msgs'}
[0.001140] (-) JobUnselected: {'identifier': 'franka_robot_state_broadcaster'}
[0.001170] (-) JobUnselected: {'identifier': 'franka_semantic_components'}
[0.001200] (-) JobUnselected: {'identifier': 'integration_launch_testing'}
[0.001314] (-) JobUnselected: {'identifier': 'joint_trajectory_controller'}
[0.001332] (-) JobUnselected: {'identifier': 'messages_fr3'}
[0.001373] (cartesian_impedance_control) JobQueued: {'identifier': 'cartesian_impedance_control', 'dependencies': OrderedDict([('franka_description', '/home/simi/franka_ros2_ws/install/franka_description'), ('franka_msgs', '/home/simi/franka_ros2_ws/install/franka_msgs'), ('messages_fr3', '/home/simi/franka_ros2_ws/install/messages_fr3'), ('franka_hardware', '/home/simi/franka_ros2_ws/install/franka_hardware'), ('franka_semantic_components', '/home/simi/franka_ros2_ws/install/franka_semantic_components'), ('franka_robot_state_broadcaster', '/home/simi/franka_ros2_ws/install/franka_robot_state_broadcaster')])}
[0.001415] (cartesian_impedance_control) JobStarted: {'identifier': 'cartesian_impedance_control'}
[0.032043] (cartesian_impedance_control) JobProgress: {'identifier': 'cartesian_impedance_control', 'progress': 'cmake'}
[0.033148] (cartesian_impedance_control) JobProgress: {'identifier': 'cartesian_impedance_control', 'progress': 'build'}
[0.033965] (cartesian_impedance_control) Command: {'cmd': ['/usr/bin/cmake', '--build', '/home/simi/franka_ros2_ws/build/cartesian_impedance_control', '--', '-j16', '-l16'], 'cwd': '/home/simi/franka_ros2_ws/build/cartesian_impedance_control', 'env': OrderedDict([('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'simi'), ('LC_TIME', 'de_CH.UTF-8'), ('XDG_SESSION_TYPE', 'wayland'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/home/simi/franka_ros2_ws/install/franka_robot_state_broadcaster/lib:/home/simi/franka_ros2_ws/install/franka_semantic_components/lib:/home/simi/franka_ros2_ws/install/franka_hardware/lib:/home/simi/franka_ros2_ws/install/messages_fr3/lib:/home/simi/franka_ros2_ws/install/franka_msgs/lib:/home/simi/franka_ros2_ws/install/cartesian_impedance_control/lib:/home/simi/franka_ros2_ws/install/joint_trajectory_controller/lib:/home/simi/franka_ros2_ws/install/integration_launch_testing/lib:/home/simi/franka_ros2_ws/install/franka_example_controllers/lib:/home/simi/franka_ros2_ws/install/franka_gripper/lib:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib'), ('HOME', '/home/simi'), ('DESKTOP_SESSION', 'ubuntu'), ('ROS_PYTHON_VERSION', '3'), ('GNOME_SHELL_SESSION_MODE', 'ubuntu'), ('GTK_MODULES', 'gail:atk-bridge'), ('LC_MONETARY', 'de_CH.UTF-8'), ('SYSTEMD_EXEC_PID', '21799'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('COLORTERM', 'truecolor'), ('IM_CONFIG_PHASE', '1'), ('WAYLAND_DISPLAY', 'wayland-0'), ('COLCON_PREFIX_PATH', '/home/simi/franka_ros2_ws/install'), ('ROS_DISTRO', 'humble'), ('LOGNAME', 'simi'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('XDG_SESSION_CLASS', 'user'), ('USERNAME', 'simi'), ('TERM', 'xterm-256color'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('ROS_LOCALHOST_ONLY', '0'), ('PATH', '/opt/ros/humble/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin'), ('SESSION_MANAGER', 'local/simi-IdeaPad-Flex-5-14ALC05:@/tmp/.ICE-unix/1757,unix/simi-IdeaPad-Flex-5-14ALC05:/tmp/.ICE-unix/1757'), ('XDG_MENU_PREFIX', 'gnome-'), ('LC_ADDRESS', 'de_CH.UTF-8'), ('GNOME_TERMINAL_SCREEN', '/org/gnome/Terminal/screen/c2c349f2_07b2_4787_befd_04c8fdaae93b'), ('GNOME_SETUP_DISPLAY', ':1'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('DISPLAY', ':0'), ('LANG', 'en_US.UTF-8'), ('XDG_CURRENT_DESKTOP', 'ubuntu:GNOME'), ('LC_TELEPHONE', 'de_CH.UTF-8'), ('XMODIFIERS', '@im=ibus'), ('XDG_SESSION_DESKTOP', 'ubuntu'), ('XAUTHORITY', '/run/user/1000/.mutter-Xwaylandauth.LXAIO2'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('GNOME_TERMINAL_SERVICE', ':1.381'), ('SSH_AGENT_LAUNCHER', 'gnome-keyring'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('AMENT_PREFIX_PATH', '/home/simi/franka_ros2_ws/install/cartesian_impedance_control:/home/simi/franka_ros2_ws/install/messages_fr3:/home/simi/franka_ros2_ws/install/joint_trajectory_controller:/home/simi/franka_ros2_ws/install/integration_launch_testing:/home/simi/franka_ros2_ws/install/franka_bringup:/home/simi/franka_ros2_ws/install/franka_robot_state_broadcaster:/home/simi/franka_ros2_ws/install/franka_example_controllers:/home/simi/franka_ros2_ws/install/franka_semantic_components:/home/simi/franka_ros2_ws/install/franka_moveit_config:/home/simi/franka_ros2_ws/install/franka_hardware:/home/simi/franka_ros2_ws/install/franka_gripper:/home/simi/franka_ros2_ws/install/franka_msgs:/home/simi/franka_ros2_ws/install/franka_description:/opt/ros/humble'), ('SHELL', '/bin/bash'), ('LC_NAME', 'de_CH.UTF-8'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'ubuntu'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('LC_MEASUREMENT', 'de_CH.UTF-8'), ('LC_IDENTIFICATION', 'de_CH.UTF-8'), ('QT_IM_MODULE', 'ibus'), ('PWD', '/home/simi/franka_ros2_ws/build/cartesian_impedance_control'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-ubuntu:/etc/xdg'), ('XDG_DATA_DIRS', '/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop'), ('PYTHONPATH', '/home/simi/franka_ros2_ws/install/messages_fr3/local/lib/python3.10/dist-packages:/home/simi/franka_ros2_ws/install/franka_gripper/local/lib/python3.10/dist-packages:/home/simi/franka_ros2_ws/install/franka_msgs/local/lib/python3.10/dist-packages:/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('LC_NUMERIC', 'de_CH.UTF-8'), ('LC_PAPER', 'de_CH.UTF-8'), ('COLCON', '1'), ('VTE_VERSION', '6800'), ('CMAKE_PREFIX_PATH', '/home/simi/franka_ros2_ws/install/franka_robot_state_broadcaster:/home/simi/franka_ros2_ws/install/franka_semantic_components:/home/simi/franka_ros2_ws/install/franka_hardware:/home/simi/franka_ros2_ws/install/messages_fr3:/home/simi/franka_ros2_ws/install/franka_msgs:/home/simi/franka_ros2_ws/install/franka_description:/home/simi/franka_ros2_ws/install/cartesian_impedance_control:/home/simi/franka_ros2_ws/install/joint_trajectory_controller:/home/simi/franka_ros2_ws/install/integration_launch_testing:/home/simi/franka_ros2_ws/install/franka_bringup:/home/simi/franka_ros2_ws/install/franka_example_controllers:/home/simi/franka_ros2_ws/install/franka_moveit_config:/home/simi/franka_ros2_ws/install/franka_gripper:/opt/ros/humble')]), 'shell': False}
[0.099954] (-) TimerEvent: {}
[0.100348] (cartesian_impedance_control) StdoutLine: {'line': b'\x1b[35m\x1b[1mConsolidate compiler generated dependencies of target cartesian_impedance_control\x1b[0m\n'}
[0.148568] (cartesian_impedance_control) StdoutLine: {'line': b'[ 12%] \x1b[32mBuilding CXX object CMakeFiles/cartesian_impedance_control.dir/src/user_input_server.cpp.o\x1b[0m\n'}
[0.149531] (cartesian_impedance_control) StdoutLine: {'line': b'[ 25%] \x1b[32mBuilding CXX object CMakeFiles/cartesian_impedance_control.dir/src/cartesian_impedance_controller.cpp.o\x1b[0m\n'}
[0.200395] (-) TimerEvent: {}
[0.300810] (-) TimerEvent: {}
[0.401534] (-) TimerEvent: {}
[0.501944] (-) TimerEvent: {}
[0.602392] (-) TimerEvent: {}
[0.702864] (-) TimerEvent: {}
[0.803336] (-) TimerEvent: {}
[0.903765] (-) TimerEvent: {}
[1.004215] (-) TimerEvent: {}
[1.104622] (-) TimerEvent: {}
[1.205000] (-) TimerEvent: {}
[1.305342] (-) TimerEvent: {}
[1.405750] (-) TimerEvent: {}
[1.506191] (-) TimerEvent: {}
[1.606641] (-) TimerEvent: {}
[1.707046] (-) TimerEvent: {}
[1.807540] (-) TimerEvent: {}
[1.908011] (-) TimerEvent: {}
[2.008491] (-) TimerEvent: {}
[2.108949] (-) TimerEvent: {}
[2.209475] (-) TimerEvent: {}
[2.309895] (-) TimerEvent: {}
[2.410386] (-) TimerEvent: {}
[2.510820] (-) TimerEvent: {}
[2.611299] (-) TimerEvent: {}
[2.711698] (-) TimerEvent: {}
[2.812102] (-) TimerEvent: {}
[2.912522] (-) TimerEvent: {}
[3.012922] (-) TimerEvent: {}
[3.113384] (-) TimerEvent: {}
[3.213892] (-) TimerEvent: {}
[3.314329] (-) TimerEvent: {}
[3.414751] (-) TimerEvent: {}
[3.515190] (-) TimerEvent: {}
[3.615563] (-) TimerEvent: {}
[3.715887] (-) TimerEvent: {}
[3.816516] (-) TimerEvent: {}
[3.917154] (-) TimerEvent: {}
[4.017883] (-) TimerEvent: {}
[4.118308] (-) TimerEvent: {}
[4.218731] (-) TimerEvent: {}
[4.319154] (-) TimerEvent: {}
[4.419575] (-) TimerEvent: {}
[4.520192] (-) TimerEvent: {}
[4.569469] (cartesian_impedance_control) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/eigen3/Eigen/Core:85\x1b[m\x1b[K,\n'}
[4.569678] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/eigen3/Eigen/Dense:1\x1b[m\x1b[K,\n'}
[4.569735] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/eigen3/Eigen/Eigen:1\x1b[m\x1b[K,\n'}
[4.569789] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/simi/franka_ros2_ws/src/cartesian_impedance_control/include/cartesian_impedance_control/user_input_server.hpp:3\x1b[m\x1b[K,\n'}
[4.569842] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/simi/franka_ros2_ws/src/cartesian_impedance_control/include/cartesian_impedance_control/cartesian_impedance_controller.hpp:29\x1b[m\x1b[K,\n'}
[4.569896] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/simi/franka_ros2_ws/src/cartesian_impedance_control/src/cartesian_impedance_controller.cpp:15\x1b[m\x1b[K:\n'}
[4.569948] (cartesian_impedance_control) StderrLine: {'line': b'/usr/include/c++/11/functional: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kstruct std::_Bind_check_arity<void (cartesian_impedance_control::CartesianImpedanceController::*)(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&), cartesian_impedance_control::CartesianImpedanceController*, const std::_Placeholder<1>&>\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.570073] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/functional:768:12:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct std::_Bind_helper<false, void (cartesian_impedance_control::CartesianImpedanceController::*)(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&), cartesian_impedance_control::CartesianImpedanceController*, const std::_Placeholder<1>&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.570224] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/functional:789:5:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Func, class ... _BoundArgs> typename std::_Bind_helper<std::__is_socketlike<_Func>::value, _Func, _BoundArgs ...>::type std::bind(_Func&&, _BoundArgs&& ...) [with _Func = void (cartesian_impedance_control::CartesianImpedanceController::*)(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&); _BoundArgs = {cartesian_impedance_control::CartesianImpedanceController*, const std::_Placeholder<1>&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.570374] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/home/simi/franka_ros2_ws/src/cartesian_impedance_control/src/cartesian_impedance_controller.cpp:219:14:\x1b[m\x1b[K   required from here\n'}
[4.570499] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/functional:756:21:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kstatic assertion failed: Wrong number of arguments for pointer-to-member\n'}
[4.570628] (cartesian_impedance_control) StderrLine: {'line': b'  755 |       static_assert(_Varargs::\x1b[01;31m\x1b[Kvalue\x1b[m\x1b[K\n'}
[4.570754] (cartesian_impedance_control) StderrLine: {'line': b'      |                               \x1b[01;31m\x1b[K~~~~~\x1b[m\x1b[K\n'}
[4.570880] (cartesian_impedance_control) StderrLine: {'line': b'  756 | \x1b[01;31m\x1b[K                    ? sizeof...(_BoundArgs) >= _Arity::value + 1\x1b[m\x1b[K\n'}
[4.570998] (cartesian_impedance_control) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.571048] (cartesian_impedance_control) StderrLine: {'line': b'  757 | \x1b[01;31m\x1b[K                    : sizeof...(_BoundArgs) == _Arity::value + 1\x1b[m\x1b[K,\n'}
[4.571098] (cartesian_impedance_control) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.571148] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/functional:756:21:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[K(false ? (2 >= (((long unsigned int)std::integral_constant<long unsigned int, 3>::value) + 1)) : (2 == (((long unsigned int)std::integral_constant<long unsigned int, 3>::value) + 1)))\x1b[m\x1b[K\xe2\x80\x99 evaluates to false\n'}
[4.620500] (-) TimerEvent: {}
[4.720792] (-) TimerEvent: {}
[4.821220] (-) TimerEvent: {}
[4.922070] (-) TimerEvent: {}
[5.022489] (-) TimerEvent: {}
[5.122924] (-) TimerEvent: {}
[5.223607] (-) TimerEvent: {}
[5.324270] (-) TimerEvent: {}
[5.425018] (-) TimerEvent: {}
[5.525654] (-) TimerEvent: {}
[5.626494] (-) TimerEvent: {}
[5.726903] (-) TimerEvent: {}
[5.827329] (-) TimerEvent: {}
[5.927720] (-) TimerEvent: {}
[6.028500] (-) TimerEvent: {}
[6.129305] (-) TimerEvent: {}
[6.229773] (-) TimerEvent: {}
[6.330319] (-) TimerEvent: {}
[6.430707] (-) TimerEvent: {}
[6.531056] (-) TimerEvent: {}
[6.631379] (-) TimerEvent: {}
[6.731791] (-) TimerEvent: {}
[6.832222] (-) TimerEvent: {}
[6.932619] (-) TimerEvent: {}
[7.033028] (-) TimerEvent: {}
[7.133515] (-) TimerEvent: {}
[7.179472] (cartesian_impedance_control) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[7.180162] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[7.180235] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[7.180521] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[7.180679] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[7.180736] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[7.180799] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[7.180849] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[7.180899] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[7.180948] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[7.181007] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/simi/franka_ros2_ws/src/cartesian_impedance_control/include/cartesian_impedance_control/user_input_server.hpp:6\x1b[m\x1b[K,\n'}
[7.181058] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/simi/franka_ros2_ws/src/cartesian_impedance_control/include/cartesian_impedance_control/cartesian_impedance_controller.hpp:29\x1b[m\x1b[K,\n'}
[7.181108] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/simi/franka_ros2_ws/src/cartesian_impedance_control/src/cartesian_impedance_controller.cpp:15\x1b[m\x1b[K:\n'}
[7.181158] (cartesian_impedance_control) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (cartesian_impedance_control::CartesianImpedanceController::*(cartesian_impedance_control::CartesianImpedanceController*, std::_Placeholder<1>))(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>; MessageT = franka_msgs::msg::FrankaRobotState_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[7.181212] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = franka_msgs::msg::FrankaRobotState_<std::allocator<void> >; CallbackT = std::_Bind<void (cartesian_impedance_control::CartesianImpedanceController::*(cartesian_impedance_control::CartesianImpedanceController*, std::_Placeholder<1>))(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<franka_msgs::msg::FrankaRobotState_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = franka_msgs::msg::FrankaRobotState_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<franka_msgs::msg::FrankaRobotState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.181283] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = franka_msgs::msg::FrankaRobotState_<std::allocator<void> >; CallbackT = std::_Bind<void (cartesian_impedance_control::CartesianImpedanceController::*(cartesian_impedance_control::CartesianImpedanceController*, std::_Placeholder<1>))(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<franka_msgs::msg::FrankaRobotState_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp_lifecycle::LifecycleNode; NodeTopicsT = rclcpp_lifecycle::LifecycleNode; ROSMessageType = franka_msgs::msg::FrankaRobotState_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<franka_msgs::msg::FrankaRobotState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.181354] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = franka_msgs::msg::FrankaRobotState_<std::allocator<void> >; CallbackT = std::_Bind<void (cartesian_impedance_control::CartesianImpedanceController::*(cartesian_impedance_control::CartesianImpedanceController*, std::_Placeholder<1>))(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<franka_msgs::msg::FrankaRobotState_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp_lifecycle::LifecycleNode; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<franka_msgs::msg::FrankaRobotState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.181418] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp_lifecycle/rclcpp_lifecycle/lifecycle_node_impl.hpp:76:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp_lifecycle::LifecycleNode::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = franka_msgs::msg::FrankaRobotState_<std::allocator<void> >; CallbackT = std::_Bind<void (cartesian_impedance_control::CartesianImpedanceController::*(cartesian_impedance_control::CartesianImpedanceController*, std::_Placeholder<1>))(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<franka_msgs::msg::FrankaRobotState_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<franka_msgs::msg::FrankaRobotState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.181518] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/home/simi/franka_ros2_ws/src/cartesian_impedance_control/src/cartesian_impedance_controller.cpp:217:98:\x1b[m\x1b[K   required from here\n'}
[7.181569] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>::function(std::_Bind<void (cartesian_impedance_control::CartesianImpedanceController::*(cartesian_impedance_control::CartesianImpedanceController*, std::_Placeholder<1>))(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.181621] (cartesian_impedance_control) StderrLine: {'line': b'  394 |       callback_variant_ = \x1b[01;31m\x1b[Kstatic_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[7.181670] (cartesian_impedance_control) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[7.181719] (cartesian_impedance_control) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/functional:59\x1b[m\x1b[K,\n'}
[7.181768] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/eigen3/Eigen/Core:85\x1b[m\x1b[K,\n'}
[7.181825] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/eigen3/Eigen/Dense:1\x1b[m\x1b[K,\n'}
[7.181876] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/eigen3/Eigen/Eigen:1\x1b[m\x1b[K,\n'}
[7.181925] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/simi/franka_ros2_ws/src/cartesian_impedance_control/include/cartesian_impedance_control/user_input_server.hpp:3\x1b[m\x1b[K,\n'}
[7.181982] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/simi/franka_ros2_ws/src/cartesian_impedance_control/include/cartesian_impedance_control/cartesian_impedance_controller.hpp:29\x1b[m\x1b[K,\n'}
[7.182032] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/simi/franka_ros2_ws/src/cartesian_impedance_control/src/cartesian_impedance_controller.cpp:15\x1b[m\x1b[K:\n'}
[7.182081] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:435:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class _Constraints> std::function<_Res(_ArgTypes ...)>::function(_Functor&&) [with _Functor = _Functor; _Constraints = _Constraints; _Res = void; _ArgTypes = {std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1, 0, -1, -1>&, const Eigen::Matrix<double, 7, 1, 0, 7, 1>&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.182135] (cartesian_impedance_control) StderrLine: {'line': b'  435 |         \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(_Functor&& __f)\n'}
[7.182186] (cartesian_impedance_control) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.182245] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:435:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[7.182295] (cartesian_impedance_control) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/bits/move.h:57\x1b[m\x1b[K,\n'}
[7.182344] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/bits/stl_pair.h:59\x1b[m\x1b[K,\n'}
[7.182393] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/utility:70\x1b[m\x1b[K,\n'}
[7.182441] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/array:38\x1b[m\x1b[K,\n'}
[7.182490] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/simi/franka_ros2_ws/src/cartesian_impedance_control/include/cartesian_impedance_control/cartesian_impedance_controller.hpp:17\x1b[m\x1b[K,\n'}
[7.182539] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/simi/franka_ros2_ws/src/cartesian_impedance_control/src/cartesian_impedance_controller.cpp:15\x1b[m\x1b[K:\n'}
[7.182596] (cartesian_impedance_control) StderrLine: {'line': b'/usr/include/c++/11/type_traits: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<bool _Cond, class _Tp> using __enable_if_t = typename std::enable_if::type [with bool _Cond = false; _Tp = void]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[7.182647] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:353:8:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Res, class ... _ArgTypes> template<class _Cond, class _Tp> using _Requires = std::__enable_if_t<_Cond::value, _Tp> [with _Cond = std::function<void(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>::_Callable<std::_Bind<void (cartesian_impedance_control::CartesianImpedanceController::*(cartesian_impedance_control::CartesianImpedanceController*, std::_Placeholder<1>))(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>&, std::_Bind<void (cartesian_impedance_control::CartesianImpedanceController::*(cartesian_impedance_control::CartesianImpedanceController*, std::_Placeholder<1>))(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>, std::__invoke_result<std::_Bind<void (cartesian_impedance_control::CartesianImpedanceController::*(cartesian_impedance_control::CartesianImpedanceController*, std::_Placeholder<1>))(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>&, std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1, 0, -1, -1>&, const Eigen::Matrix<double, 7, 1, 0, 7, 1>&> >; _Tp = void; _Res = void; _ArgTypes = {std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1, 0, -1, -1>&, const Eigen::Matrix<double, 7, 1, 0, 7, 1>&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.182707] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:434:9:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (cartesian_impedance_control::CartesianImpedanceController::*(cartesian_impedance_control::CartesianImpedanceController*, std::_Placeholder<1>))(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>; MessageT = franka_msgs::msg::FrankaRobotState_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.182780] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = franka_msgs::msg::FrankaRobotState_<std::allocator<void> >; CallbackT = std::_Bind<void (cartesian_impedance_control::CartesianImpedanceController::*(cartesian_impedance_control::CartesianImpedanceController*, std::_Placeholder<1>))(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<franka_msgs::msg::FrankaRobotState_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = franka_msgs::msg::FrankaRobotState_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<franka_msgs::msg::FrankaRobotState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.182834] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = franka_msgs::msg::FrankaRobotState_<std::allocator<void> >; CallbackT = std::_Bind<void (cartesian_impedance_control::CartesianImpedanceController::*(cartesian_impedance_control::CartesianImpedanceController*, std::_Placeholder<1>))(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<franka_msgs::msg::FrankaRobotState_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp_lifecycle::LifecycleNode; NodeTopicsT = rclcpp_lifecycle::LifecycleNode; ROSMessageType = franka_msgs::msg::FrankaRobotState_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<franka_msgs::msg::FrankaRobotState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.182903] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = franka_msgs::msg::FrankaRobotState_<std::allocator<void> >; CallbackT = std::_Bind<void (cartesian_impedance_control::CartesianImpedanceController::*(cartesian_impedance_control::CartesianImpedanceController*, std::_Placeholder<1>))(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<franka_msgs::msg::FrankaRobotState_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp_lifecycle::LifecycleNode; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<franka_msgs::msg::FrankaRobotState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.182981] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp_lifecycle/rclcpp_lifecycle/lifecycle_node_impl.hpp:76:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp_lifecycle::LifecycleNode::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = franka_msgs::msg::FrankaRobotState_<std::allocator<void> >; CallbackT = std::_Bind<void (cartesian_impedance_control::CartesianImpedanceController::*(cartesian_impedance_control::CartesianImpedanceController*, std::_Placeholder<1>))(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<franka_msgs::msg::FrankaRobotState_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<franka_msgs::msg::FrankaRobotState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.183045] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/home/simi/franka_ros2_ws/src/cartesian_impedance_control/src/cartesian_impedance_controller.cpp:217:98:\x1b[m\x1b[K   required from here\n'}
[7.183096] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/type_traits:2205:11:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.183146] (cartesian_impedance_control) StderrLine: {'line': b' 2205 |     using \x1b[01;31m\x1b[K__enable_if_t\x1b[m\x1b[K = typename enable_if<_Cond, _Tp>::type;\n'}
[7.183195] (cartesian_impedance_control) StderrLine: {'line': b'      |           \x1b[01;31m\x1b[K^~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[7.183244] (cartesian_impedance_control) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/functional:59\x1b[m\x1b[K,\n'}
[7.183293] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/eigen3/Eigen/Core:85\x1b[m\x1b[K,\n'}
[7.183342] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/eigen3/Eigen/Dense:1\x1b[m\x1b[K,\n'}
[7.183391] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/eigen3/Eigen/Eigen:1\x1b[m\x1b[K,\n'}
[7.183440] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/simi/franka_ros2_ws/src/cartesian_impedance_control/include/cartesian_impedance_control/user_input_server.hpp:3\x1b[m\x1b[K,\n'}
[7.183489] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/simi/franka_ros2_ws/src/cartesian_impedance_control/include/cartesian_impedance_control/cartesian_impedance_controller.hpp:29\x1b[m\x1b[K,\n'}
[7.183546] (cartesian_impedance_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/simi/franka_ros2_ws/src/cartesian_impedance_control/src/cartesian_impedance_controller.cpp:15\x1b[m\x1b[K:\n'}
[7.183605] (cartesian_impedance_control) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (cartesian_impedance_control::CartesianImpedanceController::*(cartesian_impedance_control::CartesianImpedanceController*, std::_Placeholder<1>))(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>; MessageT = franka_msgs::msg::FrankaRobotState_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[7.183658] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = franka_msgs::msg::FrankaRobotState_<std::allocator<void> >; CallbackT = std::_Bind<void (cartesian_impedance_control::CartesianImpedanceController::*(cartesian_impedance_control::CartesianImpedanceController*, std::_Placeholder<1>))(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<franka_msgs::msg::FrankaRobotState_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = franka_msgs::msg::FrankaRobotState_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<franka_msgs::msg::FrankaRobotState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.183731] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = franka_msgs::msg::FrankaRobotState_<std::allocator<void> >; CallbackT = std::_Bind<void (cartesian_impedance_control::CartesianImpedanceController::*(cartesian_impedance_control::CartesianImpedanceController*, std::_Placeholder<1>))(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<franka_msgs::msg::FrankaRobotState_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp_lifecycle::LifecycleNode; NodeTopicsT = rclcpp_lifecycle::LifecycleNode; ROSMessageType = franka_msgs::msg::FrankaRobotState_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<franka_msgs::msg::FrankaRobotState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.183795] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = franka_msgs::msg::FrankaRobotState_<std::allocator<void> >; CallbackT = std::_Bind<void (cartesian_impedance_control::CartesianImpedanceController::*(cartesian_impedance_control::CartesianImpedanceController*, std::_Placeholder<1>))(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<franka_msgs::msg::FrankaRobotState_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp_lifecycle::LifecycleNode; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<franka_msgs::msg::FrankaRobotState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.183856] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp_lifecycle/rclcpp_lifecycle/lifecycle_node_impl.hpp:76:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp_lifecycle::LifecycleNode::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = franka_msgs::msg::FrankaRobotState_<std::allocator<void> >; CallbackT = std::_Bind<void (cartesian_impedance_control::CartesianImpedanceController::*(cartesian_impedance_control::CartesianImpedanceController*, std::_Placeholder<1>))(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<franka_msgs::msg::FrankaRobotState_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<franka_msgs::msg::FrankaRobotState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.183929] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/home/simi/franka_ros2_ws/src/cartesian_impedance_control/src/cartesian_impedance_controller.cpp:217:98:\x1b[m\x1b[K   required from here\n'}
[7.183979] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:404:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(std::function<_Res(_ArgTypes ...)>&&) [with _Res = void; _ArgTypes = {std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1, 0, -1, -1>&, const Eigen::Matrix<double, 7, 1, 0, 7, 1>&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.184030] (cartesian_impedance_control) StderrLine: {'line': b'  404 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(function&& __x) noexcept\n'}
[7.184087] (cartesian_impedance_control) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.184137] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:404:27:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (cartesian_impedance_control::CartesianImpedanceController::*(cartesian_impedance_control::CartesianImpedanceController*, std::_Placeholder<1>))(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.184197] (cartesian_impedance_control) StderrLine: {'line': b'  404 |       function(\x1b[01;36m\x1b[Kfunction&& __x\x1b[m\x1b[K) noexcept\n'}
[7.184246] (cartesian_impedance_control) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[7.184295] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:386:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(const std::function<_Res(_ArgTypes ...)>&) [with _Res = void; _ArgTypes = {std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1, 0, -1, -1>&, const Eigen::Matrix<double, 7, 1, 0, 7, 1>&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.184346] (cartesian_impedance_control) StderrLine: {'line': b'  386 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(const function& __x)\n'}
[7.184395] (cartesian_impedance_control) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.184445] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:386:32:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (cartesian_impedance_control::CartesianImpedanceController::*(cartesian_impedance_control::CartesianImpedanceController*, std::_Placeholder<1>))(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst std::function<void(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>&\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.184498] (cartesian_impedance_control) StderrLine: {'line': b'  386 |       function(\x1b[01;36m\x1b[Kconst function& __x\x1b[m\x1b[K)\n'}
[7.184548] (cartesian_impedance_control) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[7.184598] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:375:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(std::nullptr_t) [with _Res = void; _ArgTypes = {std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1, 0, -1, -1>&, const Eigen::Matrix<double, 7, 1, 0, 7, 1>&}; std::nullptr_t = std::nullptr_t]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.184659] (cartesian_impedance_control) StderrLine: {'line': b'  375 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(nullptr_t) noexcept\n'}
[7.184709] (cartesian_impedance_control) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.184759] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:375:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (cartesian_impedance_control::CartesianImpedanceController::*(cartesian_impedance_control::CartesianImpedanceController*, std::_Placeholder<1>))(std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, 7, 1>&)>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::nullptr_t\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.184827] (cartesian_impedance_control) StderrLine: {'line': b'  375 |       function(\x1b[01;36m\x1b[Knullptr_t\x1b[m\x1b[K) noexcept\n'}
[7.184877] (cartesian_impedance_control) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[7.184927] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:368:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function() [with _Res = void; _ArgTypes = {std::shared_ptr<franka_msgs::msg::FrankaRobotState_<std::allocator<void> > >, const Eigen::Matrix<double, -1, -1, 0, -1, -1>&, const Eigen::Matrix<double, 7, 1, 0, 7, 1>&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.184981] (cartesian_impedance_control) StderrLine: {'line': b'  368 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K() noexcept\n'}
[7.185031] (cartesian_impedance_control) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.185081] (cartesian_impedance_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:368:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  candidate expects 0 arguments, 1 provided\n'}
[7.233732] (-) TimerEvent: {}
[7.334089] (-) TimerEvent: {}
[7.434495] (-) TimerEvent: {}
[7.534902] (-) TimerEvent: {}
[7.635308] (-) TimerEvent: {}
[7.735712] (-) TimerEvent: {}
[7.836118] (-) TimerEvent: {}
[7.936527] (-) TimerEvent: {}
[8.036935] (-) TimerEvent: {}
[8.137341] (-) TimerEvent: {}
[8.237781] (-) TimerEvent: {}
[8.338192] (-) TimerEvent: {}
[8.438603] (-) TimerEvent: {}
[8.539015] (-) TimerEvent: {}
[8.639425] (-) TimerEvent: {}
[8.739835] (-) TimerEvent: {}
[8.840244] (-) TimerEvent: {}
[8.940650] (-) TimerEvent: {}
[9.041057] (-) TimerEvent: {}
[9.141492] (-) TimerEvent: {}
[9.241896] (-) TimerEvent: {}
[9.342305] (-) TimerEvent: {}
[9.442713] (-) TimerEvent: {}
[9.543083] (-) TimerEvent: {}
[9.643406] (-) TimerEvent: {}
[9.743810] (-) TimerEvent: {}
[9.844210] (-) TimerEvent: {}
[9.944615] (-) TimerEvent: {}
[10.045018] (-) TimerEvent: {}
[10.145423] (-) TimerEvent: {}
[10.245898] (-) TimerEvent: {}
[10.346319] (-) TimerEvent: {}
[10.446775] (-) TimerEvent: {}
[10.547416] (-) TimerEvent: {}
[10.647875] (-) TimerEvent: {}
[10.748308] (-) TimerEvent: {}
[10.848918] (-) TimerEvent: {}
[10.949342] (-) TimerEvent: {}
[11.049842] (-) TimerEvent: {}
[11.150261] (-) TimerEvent: {}
[11.250650] (-) TimerEvent: {}
[11.351068] (-) TimerEvent: {}
[11.451521] (-) TimerEvent: {}
[11.551905] (-) TimerEvent: {}
[11.652351] (-) TimerEvent: {}
[11.752795] (-) TimerEvent: {}
[11.853244] (-) TimerEvent: {}
[11.954024] (-) TimerEvent: {}
[12.054694] (-) TimerEvent: {}
[12.155143] (-) TimerEvent: {}
[12.255604] (-) TimerEvent: {}
[12.356041] (-) TimerEvent: {}
[12.456497] (-) TimerEvent: {}
[12.556942] (-) TimerEvent: {}
[12.657394] (-) TimerEvent: {}
[12.757857] (-) TimerEvent: {}
[12.858310] (-) TimerEvent: {}
[12.958724] (-) TimerEvent: {}
[13.059185] (-) TimerEvent: {}
[13.159637] (-) TimerEvent: {}
[13.260094] (-) TimerEvent: {}
[13.360540] (-) TimerEvent: {}
[13.460992] (-) TimerEvent: {}
[13.561494] (-) TimerEvent: {}
[13.661979] (-) TimerEvent: {}
[13.762398] (-) TimerEvent: {}
[13.862859] (-) TimerEvent: {}
[13.963277] (-) TimerEvent: {}
[14.063737] (-) TimerEvent: {}
[14.164188] (-) TimerEvent: {}
[14.264644] (-) TimerEvent: {}
[14.365336] (-) TimerEvent: {}
[14.465859] (-) TimerEvent: {}
[14.566230] (-) TimerEvent: {}
[14.666605] (-) TimerEvent: {}
[14.766977] (-) TimerEvent: {}
[14.867357] (-) TimerEvent: {}
[14.967731] (-) TimerEvent: {}
[15.068106] (-) TimerEvent: {}
[15.168490] (-) TimerEvent: {}
[15.268969] (-) TimerEvent: {}
[15.369379] (-) TimerEvent: {}
[15.469884] (-) TimerEvent: {}
[15.570294] (-) TimerEvent: {}
[15.670644] (-) TimerEvent: {}
[15.770984] (-) TimerEvent: {}
[15.871444] (-) TimerEvent: {}
[15.971895] (-) TimerEvent: {}
[16.072347] (-) TimerEvent: {}
[16.172805] (-) TimerEvent: {}
[16.273261] (-) TimerEvent: {}
[16.373775] (-) TimerEvent: {}
[16.474188] (-) TimerEvent: {}
[16.574601] (-) TimerEvent: {}
[16.674996] (-) TimerEvent: {}
[16.775542] (-) TimerEvent: {}
[16.875956] (-) TimerEvent: {}
[16.976405] (-) TimerEvent: {}
[17.076859] (-) TimerEvent: {}
[17.177300] (-) TimerEvent: {}
[17.277798] (-) TimerEvent: {}
[17.378210] (-) TimerEvent: {}
[17.478668] (-) TimerEvent: {}
[17.579120] (-) TimerEvent: {}
[17.679572] (-) TimerEvent: {}
[17.780014] (-) TimerEvent: {}
[17.880454] (-) TimerEvent: {}
[17.980901] (-) TimerEvent: {}
[18.081348] (-) TimerEvent: {}
[18.182063] (-) TimerEvent: {}
[18.282475] (-) TimerEvent: {}
[18.382883] (-) TimerEvent: {}
[18.483290] (-) TimerEvent: {}
[18.583735] (-) TimerEvent: {}
[18.684188] (-) TimerEvent: {}
[18.784631] (-) TimerEvent: {}
[18.885121] (-) TimerEvent: {}
[18.985889] (-) TimerEvent: {}
[19.086304] (-) TimerEvent: {}
[19.186679] (-) TimerEvent: {}
[19.199053] (cartesian_impedance_control) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/cartesian_impedance_control.dir/build.make:76: CMakeFiles/cartesian_impedance_control.dir/src/cartesian_impedance_controller.cpp.o] Error 1\n'}
[19.199721] (cartesian_impedance_control) StderrLine: {'line': b'gmake[1]: *** [CMakeFiles/Makefile2:141: CMakeFiles/cartesian_impedance_control.dir/all] Error 2\n'}
[19.199967] (cartesian_impedance_control) StderrLine: {'line': b'gmake: *** [Makefile:146: all] Error 2\n'}
[19.202938] (cartesian_impedance_control) CommandEnded: {'returncode': 2}
[19.286909] (-) TimerEvent: {}
[19.290946] (cartesian_impedance_control) JobEnded: {'identifier': 'cartesian_impedance_control', 'rc': 2}
[19.298765] (-) EventReactorShutdown: {}
